
#ifndef INCLUDE_VNI_GENERATED_vnl_info_PlayerStatus_HXX_
#define INCLUDE_VNI_GENERATED_vnl_info_PlayerStatus_HXX_

// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/String.h>
#include <vnl/Value.hxx>

#include <vnl/Type.hxx>


namespace vnl {
namespace info {

class PlayerStatus : public vnl::Value {
public:
	static const uint32_t VNI_HASH = 0xf9baa92e;
	static const uint32_t NUM_FIELDS = 7;
	
	
	vnl::String filename;
	bool playing;
	bool error;
	int64_t begin_time;
	int64_t end_time;
	int64_t current_time;
	int64_t time_offset;
	
	PlayerStatus() {
		playing = 0;
		error = 0;
		begin_time = 0;
		end_time = 0;
		current_time = 0;
		time_offset = 0;
	}
	
	static PlayerStatus* create();
	virtual PlayerStatus* clone() const;
	virtual void raise() const { throw *this; }
	virtual void destroy();
	
	virtual void serialize(vnl::io::TypeOutput& _out) const;
	virtual void deserialize(vnl::io::TypeInput& _in, int _size);
	
	virtual uint32_t vni_hash() const { return VNI_HASH; }
	virtual const char* type_name() const { return "vnl.info.PlayerStatus"; }
	
	virtual int type_size() const { return sizeof(PlayerStatus); }
	virtual int num_fields() const { return NUM_FIELDS; }
	virtual int field_index(vnl::Hash32 _hash) const;
	virtual const char* field_name(int _index) const;
	virtual void get_field(int _index, vnl::String& _str) const;
	virtual void set_field(int _index, const vnl::String& _str);
	virtual void get_field(int _index, vnl::io::TypeOutput& _out) const;
	virtual void set_field(int _index, vnl::io::TypeInput& _in);
	
	
};

} // namespace
} // namespace

#endif // INCLUDE_VNI_GENERATED_vnl_info_PlayerStatus_HXX_
