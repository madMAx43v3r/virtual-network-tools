
#ifndef INCLUDE_VNI_GENERATED_vnl_ProcessBase_HXX_
#define INCLUDE_VNI_GENERATED_vnl_ProcessBase_HXX_

// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/Announce.hxx>
#include <vnl/Array.h>
#include <vnl/Exit.hxx>
#include <vnl/Instance.hxx>
#include <vnl/LogMsg.hxx>
#include <vnl/Object.h>
#include <vnl/Shutdown.hxx>
#include <vnl/String.h>

#include <vnl/Type.hxx>


namespace vnl {

class ProcessBase : public vnl::Object {
public:
	static const uint32_t VNI_HASH = 0x46f438;
	static const uint32_t NUM_FIELDS = 4;
	
	typedef vnl::Object Super;
	
	
	vnl::String name;
	bool do_print_stats;
	
	ProcessBase(const vnl::String& domain_, const vnl::String& topic_)
		:	vnl::Object::Object(domain_, topic_)
	{
		do_print_stats = true;
		vnl::read_config(domain_, topic_, "name", name);
		vnl::read_config(domain_, topic_, "do_print_stats", do_print_stats);
	}
	
	virtual uint32_t vni_hash() const { return VNI_HASH; }
	virtual const char* type_name() const { return "vnl.Process"; }
	
	virtual int num_fields() const { return NUM_FIELDS; }
	virtual int field_index(vnl::Hash32 _hash) const;
	virtual const char* field_name(int _index) const;
	virtual void get_field(int _index, vnl::String& _str) const;
	virtual void set_field(int _index, const vnl::String& _str);
	virtual void get_field(int _index, vnl::io::TypeOutput& _out) const;
	virtual void set_field(int _index, vnl::io::TypeInput& _in);
	
protected:
	virtual void handle(const vnl::Exit& event, const vnl::Packet& packet) { handle(event); }
	virtual void handle(const vnl::Exit& event) {}
	virtual void handle(const vnl::Announce& event, const vnl::Packet& packet) { handle(event); }
	virtual void handle(const vnl::Announce& event) {}
	virtual void pause_log() = 0;
	virtual void shutdown() = 0;
	virtual void handle(const vnl::Shutdown& event, const vnl::Packet& packet) { handle(event); }
	virtual void handle(const vnl::Shutdown& event) {}
	virtual vnl::Array<vnl::String > get_class_names() const = 0;
	virtual void set_log_filter(const vnl::String& filter) = 0;
	virtual void resume_log() = 0;
	virtual vnl::Array<vnl::Instance > get_objects() const = 0;
	virtual void handle(const vnl::LogMsg& event, const vnl::Packet& packet) { handle(event); }
	virtual void handle(const vnl::LogMsg& event) {}
	
	virtual bool vni_call(vnl::io::TypeInput& _in, uint32_t _hash, int _num_args);
	virtual bool vni_const_call(vnl::io::TypeInput& _in, uint32_t _hash, int _num_args, vnl::io::TypeOutput& _out);
	virtual bool handle_switch(vnl::Value* _sample, vnl::Packet* _packet);
	
	template<class W>
	void write_fields(W& _writer) const {
		_writer.set_vnl_log_level(vnl_log_level);
		_writer.set_vnl_max_num_pending(vnl_max_num_pending);
		_writer.set_name(name);
		_writer.set_do_print_stats(do_print_stats);
	}
	
};

} // namespace

#endif // INCLUDE_VNI_GENERATED_vnl_ProcessBase_HXX_
