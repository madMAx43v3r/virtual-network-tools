
// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/StorageSupport.hxx>
#include <vnl/Type.hxx>
#include <vnl/Var.h>

namespace vnl {

const uint32_t StorageBase::VNI_HASH;
const uint32_t StorageBase::NUM_FIELDS;

StorageBase::StorageBase() {
}

int StorageBase::get_field_index(vnl::Hash32 _hash) const {
	switch(_hash) {
		default: return -1;
	}
}

const char* StorageBase::get_field_name(int _index) const {
	switch(_index) {
		default: return 0;
	}
}

void StorageBase::get_field(int _index, vnl::String& _str) const {
	switch(_index) {
	}
}

void StorageBase::set_field(int _index, const vnl::String& _str) {
	switch(_index) {
	}
}

void StorageBase::get_field(int _index, vnl::io::TypeOutput& _out) const {
	switch(_index) {
		default: _out.putNull();
	}
}

void StorageBase::set_field(int _index, vnl::io::TypeInput& _in) {
	switch(_index) {
	}
}

void StorageBase::get_field(int _index, vnl::Var& _var) const {
	switch(_index) {
		default: _var.clear();
	}
}

void StorageBase::set_field(int _index, const vnl::Var& _var) {
	switch(_index) {
	}
}

bool StorageBase::vni_call(vnl::io::TypeInput& _in, uint32_t _hash, int _num_args) {
	switch(_hash) {
	case 0x53e783cb: 
		switch(_num_args) {
			case 1: {
				vnl::Pointer<vnl::Entry > value;
				vnl::read(_in, value);
				if(!_in.error()) {
					put_entry(value);
					return true;
				}
			}
			break;
		}
		break;
	case 0x6be27404: 
		switch(_num_args) {
			case 1: {
				vnl::Hash64 key;
				vnl::read(_in, key);
				if(!_in.error()) {
					delete_entry(key);
					return true;
				}
			}
			break;
		}
		break;
	}
	return Super::vni_call(_in, _hash, _num_args);
}

bool StorageBase::vni_const_call(vnl::io::TypeInput& _in, uint32_t _hash, int _num_args, vnl::io::TypeOutput& _out) {
	switch(_hash) {
	case 0x2d43064b: 
		switch(_num_args) {
			case 1: {
				vnl::Hash64 key;
				vnl::read(_in, key);
				if(!_in.error()) {
					vnl::Pointer<vnl::Entry > _res = get_entry(key);
					vnl::write(_out, _res);
					return true;
				}
			}
			break;
		}
		break;
	case 0xdc37fd46: 
		switch(_num_args) {
			case 1: {
				vnl::Array<vnl::Hash64 > keys;
				vnl::read(_in, keys);
				if(!_in.error()) {
					vnl::Array<vnl::Pointer<vnl::Entry > > _res = get_entries(keys);
					vnl::write(_out, _res);
					return true;
				}
			}
			break;
		}
		break;
	}
	return Super::vni_const_call(_in, _hash, _num_args, _out);
}


} // namespace
