
// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/TcpUplinkSupport.hxx>
#include <vnl/Type.hxx>

namespace vnl {

const uint32_t TcpUplinkBase::VNI_HASH;
const uint32_t TcpUplinkBase::NUM_FIELDS;

int TcpUplinkBase::get_field_index(vnl::Hash32 _hash) const {
	switch(_hash) {
		case 0x482df535: return 0;
		case 0x604b2647: return 1;
		case 0xd26001ae: return 2;
		case 0x55f7671e: return 3;
		case 0x1f5839d4: return 4;
		default: return -1;
	}
}

const char* TcpUplinkBase::get_field_name(int _index) const {
	switch(_index) {
		case 0: return "vnl_log_level";
		case 1: return "vnl_msg_timeout";
		case 2: return "vnl_heartbeat_interval";
		case 3: return "error_interval";
		case 4: return "are_connected";
		default: return 0;
	}
}

void TcpUplinkBase::get_field(int _index, vnl::String& _str) const {
	switch(_index) {
		case 0: vnl::to_string(_str, vnl_log_level); break;
		case 1: vnl::to_string(_str, vnl_msg_timeout); break;
		case 2: vnl::to_string(_str, vnl_heartbeat_interval); break;
		case 3: vnl::to_string(_str, error_interval); break;
		case 4: vnl::to_string(_str, are_connected); break;
	}
}

void TcpUplinkBase::set_field(int _index, const vnl::String& _str) {
	switch(_index) {
		case 0: vnl::from_string(_str, vnl_log_level); break;
		case 1: vnl::from_string(_str, vnl_msg_timeout); break;
		case 2: vnl::from_string(_str, vnl_heartbeat_interval); break;
		case 3: vnl::from_string(_str, error_interval); break;
		case 4: vnl::from_string(_str, are_connected); break;
	}
}

void TcpUplinkBase::get_field(int _index, vnl::io::TypeOutput& _out) const {
	switch(_index) {
		case 0: vnl::write(_out, vnl_log_level); break;
		case 1: vnl::write(_out, vnl_msg_timeout); break;
		case 2: vnl::write(_out, vnl_heartbeat_interval); break;
		case 3: vnl::write(_out, error_interval); break;
		case 4: vnl::write(_out, are_connected); break;
		default: _out.putNull();
	}
}

void TcpUplinkBase::set_field(int _index, vnl::io::TypeInput& _in) {
	switch(_index) {
		case 0: vnl::read(_in, vnl_log_level); break;
		case 1: vnl::read(_in, vnl_msg_timeout); break;
		case 2: vnl::read(_in, vnl_heartbeat_interval); break;
		case 3: vnl::read(_in, error_interval); break;
		case 4: vnl::read(_in, are_connected); break;
	}
}

bool TcpUplinkBase::vni_call(vnl::io::TypeInput& _in, uint32_t _hash, int _num_args) {
	switch(_hash) {
	case 0x55f7671e: 
		if(_num_args == 1) {
			vnl::read(_in, error_interval);
			return true;
		}
		break;
	case 0x1f5839d4: 
		if(_num_args == 1) {
			vnl::read(_in, are_connected);
			return true;
		}
		break;
	case 0x14ffa0f1: 
		switch(_num_args) {
			case 0: {
				if(!_in.error()) {
					unsubscribe_all();
					return true;
				}
			}
			break;
		}
		break;
	case 0x3bb5d48f: 
		switch(_num_args) {
			case 2: {
				vnl::String domain;
				vnl::read(_in, domain);
				vnl::String topic;
				vnl::read(_in, topic);
				if(!_in.error()) {
					subscribe(domain, topic);
					return true;
				}
			}
			break;
		}
		break;
	case 0x7fbbe878: 
		switch(_num_args) {
			case 2: {
				vnl::String domain;
				vnl::read(_in, domain);
				vnl::String topic;
				vnl::read(_in, topic);
				if(!_in.error()) {
					publish(domain, topic);
					return true;
				}
			}
			break;
		}
		break;
	case 0xbd19b5cb: 
		switch(_num_args) {
			case 0: {
				if(!_in.error()) {
					reset();
					return true;
				}
			}
			break;
		}
		break;
	case 0xc7428d8c: 
		switch(_num_args) {
			case 2: {
				vnl::String domain;
				vnl::read(_in, domain);
				vnl::String topic;
				vnl::read(_in, topic);
				if(!_in.error()) {
					unpublish(domain, topic);
					return true;
				}
			}
			break;
		}
		break;
	case 0xed7dfb37: 
		switch(_num_args) {
			case 2: {
				vnl::String domain;
				vnl::read(_in, domain);
				vnl::String topic;
				vnl::read(_in, topic);
				if(!_in.error()) {
					unsubscribe(domain, topic);
					return true;
				}
			}
			break;
		}
		break;
	}
	return Super::vni_call(_in, _hash, _num_args);
}

bool TcpUplinkBase::vni_const_call(vnl::io::TypeInput& _in, uint32_t _hash, int _num_args, vnl::io::TypeOutput& _out) {
	switch(_hash) {
	case 0x55f7671e: 
		if(_num_args == 0) {
			vnl::write(_out, error_interval);
			return true;
		}
		break;
	case 0x1f5839d4: 
		if(_num_args == 0) {
			vnl::write(_out, are_connected);
			return true;
		}
		break;
	case 0x6ccccd5b: 
		switch(_num_args) {
			case 0: {
				if(!_in.error()) {
					vnl::info::RemoteInfo _res = get_remote_info();
					vnl::write(_out, _res);
					return true;
				}
			}
			break;
		}
		break;
	}
	return Super::vni_const_call(_in, _hash, _num_args, _out);
}

bool TcpUplinkBase::handle_switch(vnl::Value* _sample, vnl::Packet* _packet) {
	switch(_sample->get_vni_hash()) {
	case 0xddc3d187: handle(*((vnl::Topic*)_sample), *_packet); return true;
	case 0x7aa64297: handle(*((vnl::info::RemoteInfo*)_sample), *_packet); return true;
	}
	return Super::handle_switch(_sample, _packet);
}

bool TcpUplinkBase::handle_switch(vnl::Value* _sample, vnl::Basic* _input) {
	switch(_sample->get_vni_hash()) {
	case 0xddc3d187: handle(*((vnl::Topic*)_sample), _input); return true;
	case 0x7aa64297: handle(*((vnl::info::RemoteInfo*)_sample), _input); return true;
	}
	return Super::handle_switch(_sample, _input);
}


} // namespace
