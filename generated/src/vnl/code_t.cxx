
// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/code_t.hxx>
#include <vnl/Type.hxx>
#include <vnl/Var.h>

namespace vnl {

const uint32_t code_t::VNI_HASH;
const uint32_t code_t::NUM_FIELDS;

code_t::code_t() {
}

code_t* code_t::create() {
	return vnl::create<code_t>();
}

code_t* code_t::create(vnl::Hash32 hash) {
	switch(hash) {
		default: return 0;
	}
}

code_t* code_t::clone() const {
	return vnl::clone<code_t>(*this);
}

void code_t::destroy() {
	this->code_t::~code_t();
	return vnl::internal::global_pool_->push_back(this, sizeof(code_t));
}

bool code_t::is_assignable(vnl::Hash32 hash) {
	switch(hash) {
		default: return false;
	}
}

bool code_t::assign(const vnl::Value& _value) {
	switch(_value.get_vni_hash()) {
			*this = (const code_t&)_value; return true;
		default: return false;
	}
}

void code_t::serialize(vnl::io::TypeOutput& _out) const {
	_out.putEntry(VNL_IO_STRUCT, NUM_FIELDS);
	_out.putHash(0x858ee518); vnl::write(_out, op);
	_out.putHash(0xca837fda); vnl::write(_out, arg);
}

void code_t::deserialize(vnl::io::TypeInput& _in, int _size) {
	for(int i = 0; i < _size && !_in.error(); ++i) {
		uint32_t _hash = 0;
		_in.getHash(_hash);
		switch(_hash) {
			case 0x858ee518: vnl::read(_in, op); break;
			case 0xca837fda: vnl::read(_in, arg); break;
			default: _in.skip();
		}
	}
}

int code_t::get_field_index(vnl::Hash32 _hash) const {
	switch(_hash) {
		case 0x858ee518: return 0;
		case 0xca837fda: return 1;
		default: return -1;
	}
}

const char* code_t::get_field_name(int _index) const {
	switch(_index) {
		case 0: return "op";
		case 1: return "arg";
		default: return 0;
	}
}

void code_t::get_field(int _index, vnl::String& _str) const {
	switch(_index) {
		case 0: vnl::to_string(_str, op); break;
		case 1: vnl::to_string(_str, arg); break;
	}
}

void code_t::set_field(int _index, const vnl::String& _str) {
	switch(_index) {
		case 0: vnl::from_string(_str, op); break;
		case 1: vnl::from_string(_str, arg); break;
	}
}

void code_t::get_field(int _index, vnl::io::TypeOutput& _out) const {
	switch(_index) {
		case 0: vnl::write(_out, op); break;
		case 1: vnl::write(_out, arg); break;
		default: _out.putNull();
	}
}

void code_t::set_field(int _index, vnl::io::TypeInput& _in) {
	switch(_index) {
		case 0: vnl::read(_in, op); break;
		case 1: vnl::read(_in, arg); break;
	}
}

void code_t::get_field(int _index, vnl::Var& _var) const {
	switch(_index) {
		case 0: _var = op; break;
		case 1: _var = arg; break;
		default: _var.clear();
	}
}

void code_t::set_field(int _index, const vnl::Var& _var) {
	switch(_index) {
		case 0: _var.to(op); break;
		case 1: _var.to(arg); break;
	}
}


} // namespace
