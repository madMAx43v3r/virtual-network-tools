
// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/tools/AdminGUISupport.hxx>
#include <vnl/Type.hxx>

namespace vnl {
namespace tools {

const uint32_t AdminGUIBase::VNI_HASH;
const uint32_t AdminGUIBase::NUM_FIELDS;

int AdminGUIBase::get_field_index(vnl::Hash32 _hash) const {
	switch(_hash) {
		case 0x482df535: return 0;
		case 0xc30f0945: return 1;
		case 0x97e08f18: return 2;
		case 0x579173b0: return 3;
		case 0xd129c896: return 4;
		default: return -1;
	}
}

const char* AdminGUIBase::get_field_name(int _index) const {
	switch(_index) {
		case 0: return "vnl_log_level";
		case 1: return "vnl_max_num_pending";
		case 2: return "target_host";
		case 3: return "target_port";
		case 4: return "interval";
		default: return 0;
	}
}

void AdminGUIBase::get_field(int _index, vnl::String& _str) const {
	switch(_index) {
		case 0: vnl::to_string(_str, vnl_log_level); break;
		case 1: vnl::to_string(_str, vnl_max_num_pending); break;
		case 2: vnl::to_string(_str, target_host); break;
		case 3: vnl::to_string(_str, target_port); break;
		case 4: vnl::to_string(_str, interval); break;
	}
}

void AdminGUIBase::set_field(int _index, const vnl::String& _str) {
	switch(_index) {
		case 0: vnl::from_string(_str, vnl_log_level); break;
		case 1: vnl::from_string(_str, vnl_max_num_pending); break;
		case 2: vnl::from_string(_str, target_host); break;
		case 3: vnl::from_string(_str, target_port); break;
		case 4: vnl::from_string(_str, interval); break;
	}
}

void AdminGUIBase::get_field(int _index, vnl::io::TypeOutput& _out) const {
	switch(_index) {
		case 0: vnl::write(_out, vnl_log_level); break;
		case 1: vnl::write(_out, vnl_max_num_pending); break;
		case 2: vnl::write(_out, target_host); break;
		case 3: vnl::write(_out, target_port); break;
		case 4: vnl::write(_out, interval); break;
		default: _out.putNull();
	}
}

void AdminGUIBase::set_field(int _index, vnl::io::TypeInput& _in) {
	switch(_index) {
		case 0: vnl::read(_in, vnl_log_level); break;
		case 1: vnl::read(_in, vnl_max_num_pending); break;
		case 2: vnl::read(_in, target_host); break;
		case 3: vnl::read(_in, target_port); break;
		case 4: vnl::read(_in, interval); break;
	}
}

bool AdminGUIBase::vni_call(vnl::io::TypeInput& _in, uint32_t _hash, int _num_args) {
	switch(_hash) {
	case 0x97e08f18: 
		if(_num_args == 1) {
			vnl::read(_in, target_host);
			return true;
		}
		break;
	case 0x579173b0: 
		if(_num_args == 1) {
			vnl::read(_in, target_port);
			return true;
		}
		break;
	case 0xd129c896: 
		if(_num_args == 1) {
			vnl::read(_in, interval);
			return true;
		}
		break;
	}
	return Super::vni_call(_in, _hash, _num_args);
}

bool AdminGUIBase::vni_const_call(vnl::io::TypeInput& _in, uint32_t _hash, int _num_args, vnl::io::TypeOutput& _out) {
	switch(_hash) {
	case 0x97e08f18: 
		if(_num_args == 0) {
			vnl::write(_out, target_host);
			return true;
		}
		break;
	case 0x579173b0: 
		if(_num_args == 0) {
			vnl::write(_out, target_port);
			return true;
		}
		break;
	case 0xd129c896: 
		if(_num_args == 0) {
			vnl::write(_out, interval);
			return true;
		}
		break;
	}
	return Super::vni_const_call(_in, _hash, _num_args, _out);
}

bool AdminGUIBase::handle_switch(vnl::Value* _sample, vnl::Packet* _packet) {
	switch(_sample->get_vni_hash()) {
	case 0x417d65c7: handle(*((vnl::Announce*)_sample), *_packet); return true;
	case 0x7e6aa525: handle(*((vnl::DuplicateKeyException*)_sample), *_packet); return true;
	case 0xbe87903d: handle(*((vnl::Exception*)_sample), *_packet); return true;
	case 0x3bd088b0: handle(*((vnl::Exit*)_sample), *_packet); return true;
	case 0x52740af4: handle(*((vnl::Header*)_sample), *_packet); return true;
	case 0xabd5ff87: handle(*((vnl::IOException*)_sample), *_packet); return true;
	case 0x67d48190: handle(*((vnl::Instance*)_sample), *_packet); return true;
	case 0x9df3e6f5: handle(*((vnl::LogMsg*)_sample), *_packet); return true;
	case 0xd7988e27: handle(*((vnl::NoSuchFieldException*)_sample), *_packet); return true;
	case 0xd8d131ca: handle(*((vnl::NoSuchKeyException*)_sample), *_packet); return true;
	case 0x69a97186: handle(*((vnl::NoSuchMethodException*)_sample), *_packet); return true;
	case 0xc10cd56c: handle(*((vnl::RecordHeader*)_sample), *_packet); return true;
	case 0x1cdb1920: handle(*((vnl::RecordValue*)_sample), *_packet); return true;
	case 0xcdc22e1f: handle(*((vnl::Shutdown*)_sample), *_packet); return true;
	case 0x8c528f1: handle(*((vnl::TimeoutException*)_sample), *_packet); return true;
	case 0xddc3d187: handle(*((vnl::Topic*)_sample), *_packet); return true;
	case 0xfdb7a5a8: handle(*((vnl::Value*)_sample), *_packet); return true;
	case 0xd52524d4: handle(*((vnl::info::Field*)_sample), *_packet); return true;
	case 0x1b510753: handle(*((vnl::info::Method*)_sample), *_packet); return true;
	case 0xf5e3f3b6: handle(*((vnl::info::Parameter*)_sample), *_packet); return true;
	case 0xf9baa92e: handle(*((vnl::info::PlayerStatus*)_sample), *_packet); return true;
	case 0x7aa64297: handle(*((vnl::info::RemoteInfo*)_sample), *_packet); return true;
	case 0x1e3eb783: handle(*((vnl::info::TopicInfo*)_sample), *_packet); return true;
	case 0xdc558ad: handle(*((vnl::info::TopicInfoList*)_sample), *_packet); return true;
	case 0xbde99c40: handle(*((vnl::info::Type*)_sample), *_packet); return true;
	}
	return Super::handle_switch(_sample, _packet);
}

bool AdminGUIBase::handle_switch(vnl::Value* _sample, vnl::Basic* _input) {
	switch(_sample->get_vni_hash()) {
	case 0x417d65c7: handle(*((vnl::Announce*)_sample), _input); return true;
	case 0x7e6aa525: handle(*((vnl::DuplicateKeyException*)_sample), _input); return true;
	case 0xbe87903d: handle(*((vnl::Exception*)_sample), _input); return true;
	case 0x3bd088b0: handle(*((vnl::Exit*)_sample), _input); return true;
	case 0x52740af4: handle(*((vnl::Header*)_sample), _input); return true;
	case 0xabd5ff87: handle(*((vnl::IOException*)_sample), _input); return true;
	case 0x67d48190: handle(*((vnl::Instance*)_sample), _input); return true;
	case 0x9df3e6f5: handle(*((vnl::LogMsg*)_sample), _input); return true;
	case 0xd7988e27: handle(*((vnl::NoSuchFieldException*)_sample), _input); return true;
	case 0xd8d131ca: handle(*((vnl::NoSuchKeyException*)_sample), _input); return true;
	case 0x69a97186: handle(*((vnl::NoSuchMethodException*)_sample), _input); return true;
	case 0xc10cd56c: handle(*((vnl::RecordHeader*)_sample), _input); return true;
	case 0x1cdb1920: handle(*((vnl::RecordValue*)_sample), _input); return true;
	case 0xcdc22e1f: handle(*((vnl::Shutdown*)_sample), _input); return true;
	case 0x8c528f1: handle(*((vnl::TimeoutException*)_sample), _input); return true;
	case 0xddc3d187: handle(*((vnl::Topic*)_sample), _input); return true;
	case 0xfdb7a5a8: handle(*((vnl::Value*)_sample), _input); return true;
	case 0xd52524d4: handle(*((vnl::info::Field*)_sample), _input); return true;
	case 0x1b510753: handle(*((vnl::info::Method*)_sample), _input); return true;
	case 0xf5e3f3b6: handle(*((vnl::info::Parameter*)_sample), _input); return true;
	case 0xf9baa92e: handle(*((vnl::info::PlayerStatus*)_sample), _input); return true;
	case 0x7aa64297: handle(*((vnl::info::RemoteInfo*)_sample), _input); return true;
	case 0x1e3eb783: handle(*((vnl::info::TopicInfo*)_sample), _input); return true;
	case 0xdc558ad: handle(*((vnl::info::TopicInfoList*)_sample), _input); return true;
	case 0xbde99c40: handle(*((vnl::info::Type*)_sample), _input); return true;
	}
	return Super::handle_switch(_sample, _input);
}


} // namespace
} // namespace
