
// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/Value.hxx>
#include <vnl/Type.hxx>
#include <vnl/Announce.hxx>
#include <vnl/DuplicateKeyException.hxx>
#include <vnl/Exception.hxx>
#include <vnl/Exit.hxx>
#include <vnl/Header.hxx>
#include <vnl/IOException.hxx>
#include <vnl/Instance.hxx>
#include <vnl/LogMsg.hxx>
#include <vnl/NoSuchFieldException.hxx>
#include <vnl/NoSuchKeyException.hxx>
#include <vnl/NoSuchMethodException.hxx>
#include <vnl/RecordHeader.hxx>
#include <vnl/RecordValue.hxx>
#include <vnl/Shutdown.hxx>
#include <vnl/Topic.hxx>
#include <vnl/info/PlayerStatus.hxx>

namespace vnl {

GlobalPool* global_pool = 0;

vnl::Value* create(vnl::Hash32 hash) {
	switch(hash) {
		case 0x417d65c7: return vnl::create<vnl::Announce>();
		case 0x7e6aa525: return vnl::create<vnl::DuplicateKeyException>();
		case 0xbe87903d: return vnl::create<vnl::Exception>();
		case 0x3bd088b0: return vnl::create<vnl::Exit>();
		case 0x52740af4: return vnl::create<vnl::Header>();
		case 0xabd5ff87: return vnl::create<vnl::IOException>();
		case 0x67d48190: return vnl::create<vnl::Instance>();
		case 0x9df3e6f5: return vnl::create<vnl::LogMsg>();
		case 0xd7988e27: return vnl::create<vnl::NoSuchFieldException>();
		case 0xd8d131ca: return vnl::create<vnl::NoSuchKeyException>();
		case 0x69a97186: return vnl::create<vnl::NoSuchMethodException>();
		case 0xc10cd56c: return vnl::create<vnl::RecordHeader>();
		case 0x1cdb1920: return vnl::create<vnl::RecordValue>();
		case 0xcdc22e1f: return vnl::create<vnl::Shutdown>();
		case 0xddc3d187: return vnl::create<vnl::Topic>();
		case 0xf9baa92e: return vnl::create<vnl::info::PlayerStatus>();
		default: return 0;
	}
}

vnl::Array<vnl::String> get_class_names() {
	vnl::Array<vnl::String> res;
	res.push_back("vnl.Announce");
	res.push_back("vnl.DuplicateKeyException");
	res.push_back("vnl.Exception");
	res.push_back("vnl.Exit");
	res.push_back("vnl.Header");
	res.push_back("vnl.IOException");
	res.push_back("vnl.Instance");
	res.push_back("vnl.LogMsg");
	res.push_back("vnl.NoSuchFieldException");
	res.push_back("vnl.NoSuchKeyException");
	res.push_back("vnl.NoSuchMethodException");
	res.push_back("vnl.RecordHeader");
	res.push_back("vnl.RecordValue");
	res.push_back("vnl.Shutdown");
	res.push_back("vnl.Topic");
	res.push_back("vnl.info.PlayerStatus");
	return res;
}

const uint32_t Value::VNI_HASH;
const uint32_t Value::NUM_FIELDS;

Value* Value::create() {
	return vnl::create<Value>();
}

Value* Value::clone() const {
	return vnl::clone<Value>(*this);
}

void Value::destroy() {
	this->Value::~Value();
	return vnl::global_pool->push_back(this, sizeof(Value));
}

void Value::serialize(vnl::io::TypeOutput& _out) const {
	_out.putEntry(VNL_IO_CLASS, NUM_FIELDS);
	_out.putHash(VNI_HASH);
}

void Value::deserialize(vnl::io::TypeInput& _in, int _size) {
	for(int i = 0; i < _size && !_in.error(); ++i) {
		uint32_t _hash = 0;
		_in.getHash(_hash);
		switch(_hash) {
			default: _in.skip();
		}
	}
}

int Value::field_index(vnl::Hash32 _hash) const {
	switch(_hash) {
		default: return -1;
	}
}

const char* Value::field_name(int _index) const {
	switch(_index) {
		default: return 0;
	}
}

void Value::get_field(int _index, vnl::String& _str) const {
	switch(_index) {
		default: _str << "{}";
	}
}

void Value::set_field(int _index, const vnl::String& _str) {
	switch(_index) {
	}
}

void Value::get_field(int _index, vnl::io::TypeOutput& _out) const {
	switch(_index) {
		default: _out.putNull();
	}
}

void Value::set_field(int _index, vnl::io::TypeInput& _in) {
	switch(_index) {
	}
}


} // namespace
