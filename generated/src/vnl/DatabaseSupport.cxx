
// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/DatabaseSupport.hxx>
#include <vnl/Type.hxx>

namespace vnl {

const uint32_t DatabaseBase::VNI_HASH;
const uint32_t DatabaseBase::NUM_FIELDS;

int DatabaseBase::get_field_index(vnl::Hash32 _hash) const {
	switch(_hash) {
		case 0x482df535: return 0;
		case 0xc30f0945: return 1;
		case 0xb60d3446: return 2;
		case 0x2d7512a8: return 3;
		default: return -1;
	}
}

const char* DatabaseBase::get_field_name(int _index) const {
	switch(_index) {
		case 0: return "vnl_log_level";
		case 1: return "vnl_max_num_pending";
		case 2: return "filename";
		case 3: return "ignore_errors";
		default: return 0;
	}
}

void DatabaseBase::get_field(int _index, vnl::String& _str) const {
	switch(_index) {
		case 0: vnl::to_string(_str, vnl_log_level); break;
		case 1: vnl::to_string(_str, vnl_max_num_pending); break;
		case 2: vnl::to_string(_str, filename); break;
		case 3: vnl::to_string(_str, ignore_errors); break;
	}
}

void DatabaseBase::set_field(int _index, const vnl::String& _str) {
	switch(_index) {
		case 0: vnl::from_string(_str, vnl_log_level); break;
		case 1: vnl::from_string(_str, vnl_max_num_pending); break;
		case 2: vnl::from_string(_str, filename); break;
		case 3: vnl::from_string(_str, ignore_errors); break;
	}
}

void DatabaseBase::get_field(int _index, vnl::io::TypeOutput& _out) const {
	switch(_index) {
		case 0: vnl::write(_out, vnl_log_level); break;
		case 1: vnl::write(_out, vnl_max_num_pending); break;
		case 2: vnl::write(_out, filename); break;
		case 3: vnl::write(_out, ignore_errors); break;
		default: _out.putNull();
	}
}

void DatabaseBase::set_field(int _index, vnl::io::TypeInput& _in) {
	switch(_index) {
		case 0: vnl::read(_in, vnl_log_level); break;
		case 1: vnl::read(_in, vnl_max_num_pending); break;
		case 2: vnl::read(_in, filename); break;
		case 3: vnl::read(_in, ignore_errors); break;
	}
}

bool DatabaseBase::vni_call(vnl::io::TypeInput& _in, uint32_t _hash, int _num_args) {
	switch(_hash) {
	case 0xb60d3446: 
		if(_num_args == 1) {
			vnl::read(_in, filename);
			return true;
		}
		break;
	case 0x2d7512a8: 
		if(_num_args == 1) {
			vnl::read(_in, ignore_errors);
			return true;
		}
		break;
	}
	return Super::vni_call(_in, _hash, _num_args);
}

bool DatabaseBase::vni_const_call(vnl::io::TypeInput& _in, uint32_t _hash, int _num_args, vnl::io::TypeOutput& _out) {
	switch(_hash) {
	case 0xb60d3446: 
		if(_num_args == 0) {
			vnl::write(_out, filename);
			return true;
		}
		break;
	case 0x2d7512a8: 
		if(_num_args == 0) {
			vnl::write(_out, ignore_errors);
			return true;
		}
		break;
	}
	return Super::vni_const_call(_in, _hash, _num_args, _out);
}

bool DatabaseBase::handle_switch(vnl::Value* _sample, vnl::Packet* _packet) {
	switch(_sample->get_vni_hash()) {
	}
	return Super::handle_switch(_sample, _packet);
}

bool DatabaseBase::handle_switch(vnl::Value* _sample, vnl::Basic* _input) {
	switch(_sample->get_vni_hash()) {
	}
	return Super::handle_switch(_sample, _input);
}


} // namespace
