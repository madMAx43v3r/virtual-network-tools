
// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/Header.hxx>
#include <vnl/Type.hxx>
#include <vnl/Var.h>

namespace vnl {

const uint32_t Header::VNI_HASH;
const uint32_t Header::NUM_FIELDS;

Header* Header::create() {
	return vnl::create<Header>();
}

Header* Header::clone() const {
	return vnl::clone<Header>(*this);
}

void Header::destroy() {
	this->Header::~Header();
	return vnl::internal::global_pool_->push_back(this, sizeof(Header));
}

bool Header::assign(const vnl::Value& _value) {
	switch(_value.get_vni_hash()) {
		case 0x52740af4: *this = (const Header&)_value; return true;
		default: return false;
	}
}

void Header::serialize(vnl::io::TypeOutput& _out) const {
	_out.putEntry(VNL_IO_CLASS, NUM_FIELDS);
	_out.putHash(VNI_HASH);
	_out.putHash(0xd27ee4a0); vnl::write(_out, src_topic);
	_out.putHash(0xaaf981a0); vnl::write(_out, dst_topic);
	_out.putHash(0x85aba286); vnl::write(_out, src_mac);
	_out.putHash(0x6ed7c747); vnl::write(_out, send_time);
}

void Header::deserialize(vnl::io::TypeInput& _in, int _size) {
	for(int i = 0; i < _size && !_in.error(); ++i) {
		uint32_t _hash = 0;
		_in.getHash(_hash);
		switch(_hash) {
			case 0xd27ee4a0: vnl::read(_in, src_topic); break;
			case 0xaaf981a0: vnl::read(_in, dst_topic); break;
			case 0x85aba286: vnl::read(_in, src_mac); break;
			case 0x6ed7c747: vnl::read(_in, send_time); break;
			default: _in.skip();
		}
	}
}

int Header::get_field_index(vnl::Hash32 _hash) const {
	switch(_hash) {
		case 0xd27ee4a0: return 0;
		case 0xaaf981a0: return 1;
		case 0x85aba286: return 2;
		case 0x6ed7c747: return 3;
		default: return -1;
	}
}

const char* Header::get_field_name(int _index) const {
	switch(_index) {
		case 0: return "src_topic";
		case 1: return "dst_topic";
		case 2: return "src_mac";
		case 3: return "send_time";
		default: return 0;
	}
}

void Header::get_field(int _index, vnl::String& _str) const {
	switch(_index) {
		case 0: vnl::to_string(_str, src_topic); break;
		case 1: vnl::to_string(_str, dst_topic); break;
		case 2: vnl::to_string(_str, src_mac); break;
		case 3: vnl::to_string(_str, send_time); break;
	}
}

void Header::set_field(int _index, const vnl::String& _str) {
	switch(_index) {
		case 0: vnl::from_string(_str, src_topic); break;
		case 1: vnl::from_string(_str, dst_topic); break;
		case 2: vnl::from_string(_str, src_mac); break;
		case 3: vnl::from_string(_str, send_time); break;
	}
}

void Header::get_field(int _index, vnl::io::TypeOutput& _out) const {
	switch(_index) {
		case 0: vnl::write(_out, src_topic); break;
		case 1: vnl::write(_out, dst_topic); break;
		case 2: vnl::write(_out, src_mac); break;
		case 3: vnl::write(_out, send_time); break;
		default: _out.putNull();
	}
}

void Header::set_field(int _index, vnl::io::TypeInput& _in) {
	switch(_index) {
		case 0: vnl::read(_in, src_topic); break;
		case 1: vnl::read(_in, dst_topic); break;
		case 2: vnl::read(_in, src_mac); break;
		case 3: vnl::read(_in, send_time); break;
	}
}

void Header::get_field(int _index, vnl::Var& _var) const {
	switch(_index) {
		case 0: _var = src_topic; break;
		case 1: _var = dst_topic; break;
		case 2: _var = src_mac; break;
		case 3: _var = send_time; break;
		default: _var.clear();
	}
}

void Header::set_field(int _index, const vnl::Var& _var) {
	switch(_index) {
		case 0: _var.to(src_topic); break;
		case 1: _var.to(dst_topic); break;
		case 2: _var.to(src_mac); break;
		case 3: _var.to(send_time); break;
	}
}


} // namespace
