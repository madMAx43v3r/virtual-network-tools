
// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/Topic.hxx>
#include <vnl/Type.hxx>
#include <vnl/Var.h>

namespace vnl {

const uint32_t Topic::VNI_HASH;
const uint32_t Topic::NUM_FIELDS;

Topic::Topic() {
}

Topic* Topic::create() {
	return vnl::create<Topic>();
}

Topic* Topic::create(vnl::Hash32 hash) {
	switch(hash) {
		case 0xddc3d187: return vnl::create<vnl::Topic>();
		default: return 0;
	}
}

Topic* Topic::clone() const {
	return vnl::clone<Topic>(*this);
}

void Topic::destroy() {
	this->Topic::~Topic();
	return vnl::internal::global_pool_->push_back(this, sizeof(Topic));
}

bool Topic::is_assignable(vnl::Hash32 hash) {
	switch(hash) {
		case 0xddc3d187: return true;
		default: return false;
	}
}

bool Topic::assign(const vnl::Value& _value) {
	switch(_value.get_vni_hash()) {
		case 0xddc3d187:
			*this = (const Topic&)_value; return true;
		default: return false;
	}
}

void Topic::serialize(vnl::io::TypeOutput& _out) const {
	_out.putEntry(VNL_IO_CLASS, NUM_FIELDS);
	_out.putHash(VNI_HASH);
	_out.putHash(0x5190a58c); vnl::write(_out, domain);
	_out.putHash(0x539b7130); vnl::write(_out, name);
}

void Topic::deserialize(vnl::io::TypeInput& _in, int _size) {
	for(int i = 0; i < _size && !_in.error(); ++i) {
		uint32_t _hash = 0;
		_in.getHash(_hash);
		switch(_hash) {
			case 0x5190a58c: vnl::read(_in, domain); break;
			case 0x539b7130: vnl::read(_in, name); break;
			default: _in.skip();
		}
	}
}

int Topic::get_field_index(vnl::Hash32 _hash) const {
	switch(_hash) {
		case 0x5190a58c: return 0;
		case 0x539b7130: return 1;
		default: return -1;
	}
}

const char* Topic::get_field_name(int _index) const {
	switch(_index) {
		case 0: return "domain";
		case 1: return "name";
		default: return 0;
	}
}

void Topic::get_field(int _index, vnl::String& _str) const {
	switch(_index) {
		case 0: vnl::to_string(_str, domain); break;
		case 1: vnl::to_string(_str, name); break;
	}
}

void Topic::set_field(int _index, const vnl::String& _str) {
	switch(_index) {
		case 0: vnl::from_string(_str, domain); break;
		case 1: vnl::from_string(_str, name); break;
	}
}

void Topic::get_field(int _index, vnl::io::TypeOutput& _out) const {
	switch(_index) {
		case 0: vnl::write(_out, domain); break;
		case 1: vnl::write(_out, name); break;
		default: _out.putNull();
	}
}

void Topic::set_field(int _index, vnl::io::TypeInput& _in) {
	switch(_index) {
		case 0: vnl::read(_in, domain); break;
		case 1: vnl::read(_in, name); break;
	}
}

void Topic::get_field(int _index, vnl::Var& _var) const {
	switch(_index) {
		case 0: _var = domain; break;
		case 1: _var = name; break;
		default: _var.clear();
	}
}

void Topic::set_field(int _index, const vnl::Var& _var) {
	switch(_index) {
		case 0: _var.to(domain); break;
		case 1: _var.to(name); break;
	}
}


} // namespace
