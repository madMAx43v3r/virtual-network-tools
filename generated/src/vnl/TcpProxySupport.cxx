
// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/TcpProxySupport.hxx>
#include <vnl/Type.hxx>
#include <vnl/Var.h>

namespace vnl {

const uint32_t TcpProxyBase::VNI_HASH;
const uint32_t TcpProxyBase::NUM_FIELDS;

int TcpProxyBase::get_field_index(vnl::Hash32 _hash) const {
	switch(_hash) {
		case 0x482df535: return 0;
		case 0x604b2647: return 1;
		case 0xd26001ae: return 2;
		case 0x55f7671e: return 3;
		case 0x1f5839d4: return 4;
		case 0x7d63bf0a: return 5;
		case 0xce66f455: return 6;
		case 0x60ca0d4f: return 7;
		case 0x668ecf71: return 8;
		case 0x9112770d: return 9;
		default: return -1;
	}
}

const char* TcpProxyBase::get_field_name(int _index) const {
	switch(_index) {
		case 0: return "vnl_log_level";
		case 1: return "vnl_msg_timeout";
		case 2: return "vnl_heartbeat_interval";
		case 3: return "error_interval";
		case 4: return "are_connected";
		case 5: return "num_read";
		case 6: return "num_write";
		case 7: return "num_flush";
		case 8: return "num_bytes_read";
		case 9: return "num_bytes_write";
		default: return 0;
	}
}

void TcpProxyBase::get_field(int _index, vnl::String& _str) const {
	switch(_index) {
		case 0: vnl::to_string(_str, vnl_log_level); break;
		case 1: vnl::to_string(_str, vnl_msg_timeout); break;
		case 2: vnl::to_string(_str, vnl_heartbeat_interval); break;
		case 3: vnl::to_string(_str, error_interval); break;
		case 4: vnl::to_string(_str, are_connected); break;
		case 5: vnl::to_string(_str, num_read); break;
		case 6: vnl::to_string(_str, num_write); break;
		case 7: vnl::to_string(_str, num_flush); break;
		case 8: vnl::to_string(_str, num_bytes_read); break;
		case 9: vnl::to_string(_str, num_bytes_write); break;
	}
}

void TcpProxyBase::set_field(int _index, const vnl::String& _str) {
	switch(_index) {
		case 0: vnl::from_string(_str, vnl_log_level); break;
		case 1: vnl::from_string(_str, vnl_msg_timeout); break;
		case 2: vnl::from_string(_str, vnl_heartbeat_interval); break;
		case 3: vnl::from_string(_str, error_interval); break;
		case 4: vnl::from_string(_str, are_connected); break;
		case 5: vnl::from_string(_str, num_read); break;
		case 6: vnl::from_string(_str, num_write); break;
		case 7: vnl::from_string(_str, num_flush); break;
		case 8: vnl::from_string(_str, num_bytes_read); break;
		case 9: vnl::from_string(_str, num_bytes_write); break;
	}
}

void TcpProxyBase::get_field(int _index, vnl::io::TypeOutput& _out) const {
	switch(_index) {
		case 0: vnl::write(_out, vnl_log_level); break;
		case 1: vnl::write(_out, vnl_msg_timeout); break;
		case 2: vnl::write(_out, vnl_heartbeat_interval); break;
		case 3: vnl::write(_out, error_interval); break;
		case 4: vnl::write(_out, are_connected); break;
		case 5: vnl::write(_out, num_read); break;
		case 6: vnl::write(_out, num_write); break;
		case 7: vnl::write(_out, num_flush); break;
		case 8: vnl::write(_out, num_bytes_read); break;
		case 9: vnl::write(_out, num_bytes_write); break;
		default: _out.putNull();
	}
}

void TcpProxyBase::set_field(int _index, vnl::io::TypeInput& _in) {
	switch(_index) {
		case 0: vnl::read(_in, vnl_log_level); break;
		case 1: vnl::read(_in, vnl_msg_timeout); break;
		case 2: vnl::read(_in, vnl_heartbeat_interval); break;
		case 3: vnl::read(_in, error_interval); break;
		case 4: vnl::read(_in, are_connected); break;
		case 5: vnl::read(_in, num_read); break;
		case 6: vnl::read(_in, num_write); break;
		case 7: vnl::read(_in, num_flush); break;
		case 8: vnl::read(_in, num_bytes_read); break;
		case 9: vnl::read(_in, num_bytes_write); break;
	}
}

void TcpProxyBase::get_field(int _index, vnl::Var& _var) const {
	switch(_index) {
		case 0: _var = vnl_log_level; break;
		case 1: _var = vnl_msg_timeout; break;
		case 2: _var = vnl_heartbeat_interval; break;
		case 3: _var = error_interval; break;
		case 4: _var = are_connected; break;
		case 5: _var = num_read; break;
		case 6: _var = num_write; break;
		case 7: _var = num_flush; break;
		case 8: _var = num_bytes_read; break;
		case 9: _var = num_bytes_write; break;
		default: _var.clear();
	}
}

void TcpProxyBase::set_field(int _index, const vnl::Var& _var) {
	switch(_index) {
		case 0: _var.to(vnl_log_level); break;
		case 1: _var.to(vnl_msg_timeout); break;
		case 2: _var.to(vnl_heartbeat_interval); break;
		case 3: _var.to(error_interval); break;
		case 4: _var.to(are_connected); break;
		case 5: _var.to(num_read); break;
		case 6: _var.to(num_write); break;
		case 7: _var.to(num_flush); break;
		case 8: _var.to(num_bytes_read); break;
		case 9: _var.to(num_bytes_write); break;
	}
}

bool TcpProxyBase::vni_call(vnl::io::TypeInput& _in, uint32_t _hash, int _num_args) {
	switch(_hash) {
	}
	return Super::vni_call(_in, _hash, _num_args);
}

bool TcpProxyBase::vni_const_call(vnl::io::TypeInput& _in, uint32_t _hash, int _num_args, vnl::io::TypeOutput& _out) {
	switch(_hash) {
	}
	return Super::vni_const_call(_in, _hash, _num_args, _out);
}

bool TcpProxyBase::handle_switch(vnl::Value* _sample, vnl::Packet* _packet) {
	switch(_sample->get_vni_hash()) {
	}
	return Super::handle_switch(_sample, _packet);
}

bool TcpProxyBase::handle_switch(vnl::Value* _sample, vnl::Basic* _input) {
	switch(_sample->get_vni_hash()) {
	}
	return Super::handle_switch(_sample, _input);
}


} // namespace
