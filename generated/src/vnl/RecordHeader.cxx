
// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/RecordHeader.hxx>
#include <vnl/Type.hxx>
#include <vnl/Var.h>

namespace vnl {

const uint32_t RecordHeader::VNI_HASH;
const uint32_t RecordHeader::NUM_FIELDS;

RecordHeader::RecordHeader() {
	version = 2;
	header_size = 0;
	have_type_info = 0;
	have_config = 0;
	num_samples = 0;
	begin_time = 0;
	end_time = 0;
}

RecordHeader* RecordHeader::create() {
	return vnl::create<RecordHeader>();
}

RecordHeader* RecordHeader::create(vnl::Hash32 hash) {
	switch(hash) {
		case 0xc10cd56c: return vnl::create<vnl::RecordHeader>();
		default: return 0;
	}
}

RecordHeader* RecordHeader::clone() const {
	return vnl::clone<RecordHeader>(*this);
}

void RecordHeader::destroy() {
	this->RecordHeader::~RecordHeader();
	return vnl::internal::global_pool_->push_back(this, sizeof(RecordHeader));
}

bool RecordHeader::is_assignable(vnl::Hash32 hash) {
	switch(hash) {
		case 0xc10cd56c: return true;
		default: return false;
	}
}

bool RecordHeader::assign(const vnl::Value& _value) {
	switch(_value.get_vni_hash()) {
		case 0xc10cd56c:
			*this = (const RecordHeader&)_value; return true;
		default: return false;
	}
}

void RecordHeader::serialize(vnl::io::TypeOutput& _out) const {
	_out.putEntry(VNL_IO_CLASS, NUM_FIELDS);
	_out.putHash(VNI_HASH);
	_out.putHash(0x55c30e99); vnl::write(_out, version);
	_out.putHash(0xd7a7ecc4); vnl::write(_out, header_size);
	_out.putHash(0xf3aac4d9); vnl::write(_out, have_type_info);
	_out.putHash(0x7b270b29); vnl::write(_out, have_config);
	_out.putHash(0x5ee0fae3); vnl::write(_out, num_samples);
	_out.putHash(0x9c1b758e); vnl::write(_out, begin_time);
	_out.putHash(0x28517039); vnl::write(_out, end_time);
	_out.putHash(0x22dd6aa2); vnl::write(_out, topics);
}

void RecordHeader::deserialize(vnl::io::TypeInput& _in, int _size) {
	for(int i = 0; i < _size && !_in.error(); ++i) {
		uint32_t _hash = 0;
		_in.getHash(_hash);
		switch(_hash) {
			case 0x55c30e99: vnl::read(_in, version); break;
			case 0xd7a7ecc4: vnl::read(_in, header_size); break;
			case 0xf3aac4d9: vnl::read(_in, have_type_info); break;
			case 0x7b270b29: vnl::read(_in, have_config); break;
			case 0x5ee0fae3: vnl::read(_in, num_samples); break;
			case 0x9c1b758e: vnl::read(_in, begin_time); break;
			case 0x28517039: vnl::read(_in, end_time); break;
			case 0x22dd6aa2: vnl::read(_in, topics); break;
			default: _in.skip();
		}
	}
}

int RecordHeader::get_field_index(vnl::Hash32 _hash) const {
	switch(_hash) {
		case 0x55c30e99: return 0;
		case 0xd7a7ecc4: return 1;
		case 0xf3aac4d9: return 2;
		case 0x7b270b29: return 3;
		case 0x5ee0fae3: return 4;
		case 0x9c1b758e: return 5;
		case 0x28517039: return 6;
		case 0x22dd6aa2: return 7;
		default: return -1;
	}
}

const char* RecordHeader::get_field_name(int _index) const {
	switch(_index) {
		case 0: return "version";
		case 1: return "header_size";
		case 2: return "have_type_info";
		case 3: return "have_config";
		case 4: return "num_samples";
		case 5: return "begin_time";
		case 6: return "end_time";
		case 7: return "topics";
		default: return 0;
	}
}

void RecordHeader::get_field(int _index, vnl::String& _str) const {
	switch(_index) {
		case 0: vnl::to_string(_str, version); break;
		case 1: vnl::to_string(_str, header_size); break;
		case 2: vnl::to_string(_str, have_type_info); break;
		case 3: vnl::to_string(_str, have_config); break;
		case 4: vnl::to_string(_str, num_samples); break;
		case 5: vnl::to_string(_str, begin_time); break;
		case 6: vnl::to_string(_str, end_time); break;
		case 7: vnl::to_string(_str, topics); break;
	}
}

void RecordHeader::set_field(int _index, const vnl::String& _str) {
	switch(_index) {
		case 0: vnl::from_string(_str, version); break;
		case 1: vnl::from_string(_str, header_size); break;
		case 2: vnl::from_string(_str, have_type_info); break;
		case 3: vnl::from_string(_str, have_config); break;
		case 4: vnl::from_string(_str, num_samples); break;
		case 5: vnl::from_string(_str, begin_time); break;
		case 6: vnl::from_string(_str, end_time); break;
		case 7: vnl::from_string(_str, topics); break;
	}
}

void RecordHeader::get_field(int _index, vnl::io::TypeOutput& _out) const {
	switch(_index) {
		case 0: vnl::write(_out, version); break;
		case 1: vnl::write(_out, header_size); break;
		case 2: vnl::write(_out, have_type_info); break;
		case 3: vnl::write(_out, have_config); break;
		case 4: vnl::write(_out, num_samples); break;
		case 5: vnl::write(_out, begin_time); break;
		case 6: vnl::write(_out, end_time); break;
		case 7: vnl::write(_out, topics); break;
		default: _out.putNull();
	}
}

void RecordHeader::set_field(int _index, vnl::io::TypeInput& _in) {
	switch(_index) {
		case 0: vnl::read(_in, version); break;
		case 1: vnl::read(_in, header_size); break;
		case 2: vnl::read(_in, have_type_info); break;
		case 3: vnl::read(_in, have_config); break;
		case 4: vnl::read(_in, num_samples); break;
		case 5: vnl::read(_in, begin_time); break;
		case 6: vnl::read(_in, end_time); break;
		case 7: vnl::read(_in, topics); break;
	}
}

void RecordHeader::get_field(int _index, vnl::Var& _var) const {
	switch(_index) {
		case 0: _var = version; break;
		case 1: _var = header_size; break;
		case 2: _var = have_type_info; break;
		case 3: _var = have_config; break;
		case 4: _var = num_samples; break;
		case 5: _var = begin_time; break;
		case 6: _var = end_time; break;
		case 7: _var = topics; break;
		default: _var.clear();
	}
}

void RecordHeader::set_field(int _index, const vnl::Var& _var) {
	switch(_index) {
		case 0: _var.to(version); break;
		case 1: _var.to(header_size); break;
		case 2: _var.to(have_type_info); break;
		case 3: _var.to(have_config); break;
		case 4: _var.to(num_samples); break;
		case 5: _var.to(begin_time); break;
		case 6: _var.to(end_time); break;
		case 7: _var.to(topics); break;
	}
}


} // namespace
