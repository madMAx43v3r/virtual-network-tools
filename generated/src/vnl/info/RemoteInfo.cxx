
// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/info/RemoteInfo.hxx>
#include <vnl/Type.hxx>
#include <vnl/Var.h>

namespace vnl {
namespace info {

const uint32_t RemoteInfo::VNI_HASH;
const uint32_t RemoteInfo::NUM_FIELDS;

RemoteInfo::RemoteInfo() {
}

RemoteInfo* RemoteInfo::create() {
	return vnl::create<RemoteInfo>();
}

RemoteInfo* RemoteInfo::create(vnl::Hash32 hash) {
	switch(hash) {
		case 0x7aa64297: return vnl::create<vnl::info::RemoteInfo>();
		default: return 0;
	}
}

RemoteInfo* RemoteInfo::clone() const {
	return vnl::clone<RemoteInfo>(*this);
}

void RemoteInfo::destroy() {
	this->RemoteInfo::~RemoteInfo();
	return vnl::internal::global_pool_->push_back(this, sizeof(RemoteInfo));
}

bool RemoteInfo::is_assignable(vnl::Hash32 hash) {
	switch(hash) {
		case 0x7aa64297: return true;
		default: return false;
	}
}

bool RemoteInfo::assign(const vnl::Value& _value) {
	switch(_value.get_vni_hash()) {
		case 0x7aa64297:
			*this = (const RemoteInfo&)_value; return true;
		default: return false;
	}
}

void RemoteInfo::serialize(vnl::io::TypeOutput& _out) const {
	_out.putEntry(VNL_IO_CLASS, NUM_FIELDS);
	_out.putHash(VNI_HASH);
	_out.putHash(0x29243084); vnl::write(_out, domain_name);
	_out.putHash(0x95fd810); vnl::write(_out, config_name);
}

void RemoteInfo::deserialize(vnl::io::TypeInput& _in, int _size) {
	for(int i = 0; i < _size && !_in.error(); ++i) {
		uint32_t _hash = 0;
		_in.getHash(_hash);
		switch(_hash) {
			case 0x29243084: vnl::read(_in, domain_name); break;
			case 0x95fd810: vnl::read(_in, config_name); break;
			default: _in.skip();
		}
	}
}

int RemoteInfo::get_field_index(vnl::Hash32 _hash) const {
	switch(_hash) {
		case 0x29243084: return 0;
		case 0x95fd810: return 1;
		default: return -1;
	}
}

const char* RemoteInfo::get_field_name(int _index) const {
	switch(_index) {
		case 0: return "domain_name";
		case 1: return "config_name";
		default: return 0;
	}
}

void RemoteInfo::get_field(int _index, vnl::String& _str) const {
	switch(_index) {
		case 0: vnl::to_string(_str, domain_name); break;
		case 1: vnl::to_string(_str, config_name); break;
	}
}

void RemoteInfo::set_field(int _index, const vnl::String& _str) {
	switch(_index) {
		case 0: vnl::from_string(_str, domain_name); break;
		case 1: vnl::from_string(_str, config_name); break;
	}
}

void RemoteInfo::get_field(int _index, vnl::io::TypeOutput& _out) const {
	switch(_index) {
		case 0: vnl::write(_out, domain_name); break;
		case 1: vnl::write(_out, config_name); break;
		default: _out.putNull();
	}
}

void RemoteInfo::set_field(int _index, vnl::io::TypeInput& _in) {
	switch(_index) {
		case 0: vnl::read(_in, domain_name); break;
		case 1: vnl::read(_in, config_name); break;
	}
}

void RemoteInfo::get_field(int _index, vnl::Var& _var) const {
	switch(_index) {
		case 0: _var = domain_name; break;
		case 1: _var = config_name; break;
		default: _var.clear();
	}
}

void RemoteInfo::set_field(int _index, const vnl::Var& _var) {
	switch(_index) {
		case 0: _var.to(domain_name); break;
		case 1: _var.to(config_name); break;
	}
}


} // namespace
} // namespace
