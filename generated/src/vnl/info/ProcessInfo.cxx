
// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/info/ProcessInfo.hxx>
#include <vnl/Type.hxx>

namespace vnl {
namespace info {

const uint32_t ProcessInfo::VNI_HASH;
const uint32_t ProcessInfo::NUM_FIELDS;

ProcessInfo* ProcessInfo::create() {
	return vnl::create<ProcessInfo>();
}

ProcessInfo* ProcessInfo::clone() const {
	return vnl::clone<ProcessInfo>(*this);
}

void ProcessInfo::destroy() {
	this->ProcessInfo::~ProcessInfo();
	return vnl::internal::global_pool_->push_back(this, sizeof(ProcessInfo));
}

void ProcessInfo::serialize(vnl::io::TypeOutput& _out) const {
	_out.putEntry(VNL_IO_CLASS, NUM_FIELDS);
	_out.putHash(VNI_HASH);
	_out.putHash(0x539b7130); vnl::write(_out, name);
	_out.putHash(0x6f5acb36); vnl::write(_out, pages);
	_out.putHash(0xb962a38); vnl::write(_out, blocks);
	_out.putHash(0x5f332c02); vnl::write(_out, objects);
}

void ProcessInfo::deserialize(vnl::io::TypeInput& _in, int _size) {
	for(int i = 0; i < _size && !_in.error(); ++i) {
		uint32_t _hash = 0;
		_in.getHash(_hash);
		switch(_hash) {
			case 0x539b7130: vnl::read(_in, name); break;
			case 0x6f5acb36: vnl::read(_in, pages); break;
			case 0xb962a38: vnl::read(_in, blocks); break;
			case 0x5f332c02: vnl::read(_in, objects); break;
			default: _in.skip();
		}
	}
}

int ProcessInfo::get_field_index(vnl::Hash32 _hash) const {
	switch(_hash) {
		case 0x539b7130: return 0;
		case 0x6f5acb36: return 1;
		case 0xb962a38: return 2;
		case 0x5f332c02: return 3;
		default: return -1;
	}
}

const char* ProcessInfo::get_field_name(int _index) const {
	switch(_index) {
		case 0: return "name";
		case 1: return "pages";
		case 2: return "blocks";
		case 3: return "objects";
		default: return 0;
	}
}

void ProcessInfo::get_field(int _index, vnl::String& _str) const {
	switch(_index) {
		case 0: vnl::to_string(_str, name); break;
		case 1: vnl::to_string(_str, pages); break;
		case 2: vnl::to_string(_str, blocks); break;
		case 3: vnl::to_string(_str, objects); break;
	}
}

void ProcessInfo::set_field(int _index, const vnl::String& _str) {
	switch(_index) {
		case 0: vnl::from_string(_str, name); break;
		case 1: vnl::from_string(_str, pages); break;
		case 2: vnl::from_string(_str, blocks); break;
		case 3: vnl::from_string(_str, objects); break;
	}
}

void ProcessInfo::get_field(int _index, vnl::io::TypeOutput& _out) const {
	switch(_index) {
		case 0: vnl::write(_out, name); break;
		case 1: vnl::write(_out, pages); break;
		case 2: vnl::write(_out, blocks); break;
		case 3: vnl::write(_out, objects); break;
		default: _out.putNull();
	}
}

void ProcessInfo::set_field(int _index, vnl::io::TypeInput& _in) {
	switch(_index) {
		case 0: vnl::read(_in, name); break;
		case 1: vnl::read(_in, pages); break;
		case 2: vnl::read(_in, blocks); break;
		case 3: vnl::read(_in, objects); break;
	}
}


} // namespace
} // namespace
