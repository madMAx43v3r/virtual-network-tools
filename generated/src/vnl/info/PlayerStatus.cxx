
// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/info/PlayerStatus.hxx>
#include <vnl/Type.hxx>
#include <vnl/Var.h>

namespace vnl {
namespace info {

const uint32_t PlayerStatus::VNI_HASH;
const uint32_t PlayerStatus::NUM_FIELDS;

PlayerStatus* PlayerStatus::create() {
	return vnl::create<PlayerStatus>();
}

PlayerStatus* PlayerStatus::clone() const {
	return vnl::clone<PlayerStatus>(*this);
}

void PlayerStatus::destroy() {
	this->PlayerStatus::~PlayerStatus();
	return vnl::internal::global_pool_->push_back(this, sizeof(PlayerStatus));
}

bool PlayerStatus::assign(const vnl::Value& _value) {
	switch(_value.get_vni_hash()) {
		case 0xf9baa92e: *this = (const PlayerStatus&)_value; return true;
		default: return false;
	}
}

void PlayerStatus::serialize(vnl::io::TypeOutput& _out) const {
	_out.putEntry(VNL_IO_CLASS, NUM_FIELDS);
	_out.putHash(VNI_HASH);
	_out.putHash(0xb60d3446); vnl::write(_out, filename);
	_out.putHash(0x2c364d4d); vnl::write(_out, playing);
	_out.putHash(0x38bdfa85); vnl::write(_out, error);
	_out.putHash(0x9c1b758e); vnl::write(_out, begin_time);
	_out.putHash(0x28517039); vnl::write(_out, end_time);
	_out.putHash(0xec387c20); vnl::write(_out, current_time);
	_out.putHash(0x94c1d19e); vnl::write(_out, time_offset);
}

void PlayerStatus::deserialize(vnl::io::TypeInput& _in, int _size) {
	for(int i = 0; i < _size && !_in.error(); ++i) {
		uint32_t _hash = 0;
		_in.getHash(_hash);
		switch(_hash) {
			case 0xb60d3446: vnl::read(_in, filename); break;
			case 0x2c364d4d: vnl::read(_in, playing); break;
			case 0x38bdfa85: vnl::read(_in, error); break;
			case 0x9c1b758e: vnl::read(_in, begin_time); break;
			case 0x28517039: vnl::read(_in, end_time); break;
			case 0xec387c20: vnl::read(_in, current_time); break;
			case 0x94c1d19e: vnl::read(_in, time_offset); break;
			default: _in.skip();
		}
	}
}

int PlayerStatus::get_field_index(vnl::Hash32 _hash) const {
	switch(_hash) {
		case 0xb60d3446: return 0;
		case 0x2c364d4d: return 1;
		case 0x38bdfa85: return 2;
		case 0x9c1b758e: return 3;
		case 0x28517039: return 4;
		case 0xec387c20: return 5;
		case 0x94c1d19e: return 6;
		default: return -1;
	}
}

const char* PlayerStatus::get_field_name(int _index) const {
	switch(_index) {
		case 0: return "filename";
		case 1: return "playing";
		case 2: return "error";
		case 3: return "begin_time";
		case 4: return "end_time";
		case 5: return "current_time";
		case 6: return "time_offset";
		default: return 0;
	}
}

void PlayerStatus::get_field(int _index, vnl::String& _str) const {
	switch(_index) {
		case 0: vnl::to_string(_str, filename); break;
		case 1: vnl::to_string(_str, playing); break;
		case 2: vnl::to_string(_str, error); break;
		case 3: vnl::to_string(_str, begin_time); break;
		case 4: vnl::to_string(_str, end_time); break;
		case 5: vnl::to_string(_str, current_time); break;
		case 6: vnl::to_string(_str, time_offset); break;
	}
}

void PlayerStatus::set_field(int _index, const vnl::String& _str) {
	switch(_index) {
		case 0: vnl::from_string(_str, filename); break;
		case 1: vnl::from_string(_str, playing); break;
		case 2: vnl::from_string(_str, error); break;
		case 3: vnl::from_string(_str, begin_time); break;
		case 4: vnl::from_string(_str, end_time); break;
		case 5: vnl::from_string(_str, current_time); break;
		case 6: vnl::from_string(_str, time_offset); break;
	}
}

void PlayerStatus::get_field(int _index, vnl::io::TypeOutput& _out) const {
	switch(_index) {
		case 0: vnl::write(_out, filename); break;
		case 1: vnl::write(_out, playing); break;
		case 2: vnl::write(_out, error); break;
		case 3: vnl::write(_out, begin_time); break;
		case 4: vnl::write(_out, end_time); break;
		case 5: vnl::write(_out, current_time); break;
		case 6: vnl::write(_out, time_offset); break;
		default: _out.putNull();
	}
}

void PlayerStatus::set_field(int _index, vnl::io::TypeInput& _in) {
	switch(_index) {
		case 0: vnl::read(_in, filename); break;
		case 1: vnl::read(_in, playing); break;
		case 2: vnl::read(_in, error); break;
		case 3: vnl::read(_in, begin_time); break;
		case 4: vnl::read(_in, end_time); break;
		case 5: vnl::read(_in, current_time); break;
		case 6: vnl::read(_in, time_offset); break;
	}
}

void PlayerStatus::get_field(int _index, vnl::Var& _var) const {
	switch(_index) {
		case 0: _var = filename; break;
		case 1: _var = playing; break;
		case 2: _var = error; break;
		case 3: _var = begin_time; break;
		case 4: _var = end_time; break;
		case 5: _var = current_time; break;
		case 6: _var = time_offset; break;
		default: _var.clear();
	}
}

void PlayerStatus::set_field(int _index, const vnl::Var& _var) {
	switch(_index) {
		case 0: _var.to(filename); break;
		case 1: _var.to(playing); break;
		case 2: _var.to(error); break;
		case 3: _var.to(begin_time); break;
		case 4: _var.to(end_time); break;
		case 5: _var.to(current_time); break;
		case 6: _var.to(time_offset); break;
	}
}


} // namespace
} // namespace
