
// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/info/ClientInfo.hxx>
#include <vnl/Type.hxx>

namespace vnl {
namespace info {

const uint32_t ClientInfo::VNI_HASH;
const uint32_t ClientInfo::NUM_FIELDS;

ClientInfo* ClientInfo::create() {
	return vnl::create<ClientInfo>();
}

ClientInfo* ClientInfo::clone() const {
	return vnl::clone<ClientInfo>(*this);
}

void ClientInfo::destroy() {
	this->ClientInfo::~ClientInfo();
	return vnl::internal::global_pool_->push_back(this, sizeof(ClientInfo));
}

void ClientInfo::serialize(vnl::io::TypeOutput& _out) const {
	_out.putEntry(VNL_IO_CLASS, NUM_FIELDS);
	_out.putHash(VNI_HASH);
	_out.putHash(0xe451aab2); vnl::write(_out, num_requests);
	_out.putHash(0xb5a0f43c); vnl::write(_out, num_errors);
}

void ClientInfo::deserialize(vnl::io::TypeInput& _in, int _size) {
	for(int i = 0; i < _size && !_in.error(); ++i) {
		uint32_t _hash = 0;
		_in.getHash(_hash);
		switch(_hash) {
			case 0xe451aab2: vnl::read(_in, num_requests); break;
			case 0xb5a0f43c: vnl::read(_in, num_errors); break;
			default: _in.skip();
		}
	}
}

int ClientInfo::get_field_index(vnl::Hash32 _hash) const {
	switch(_hash) {
		case 0xe451aab2: return 0;
		case 0xb5a0f43c: return 1;
		default: return -1;
	}
}

const char* ClientInfo::get_field_name(int _index) const {
	switch(_index) {
		case 0: return "num_requests";
		case 1: return "num_errors";
		default: return 0;
	}
}

void ClientInfo::get_field(int _index, vnl::String& _str) const {
	switch(_index) {
		case 0: vnl::to_string(_str, num_requests); break;
		case 1: vnl::to_string(_str, num_errors); break;
	}
}

void ClientInfo::set_field(int _index, const vnl::String& _str) {
	switch(_index) {
		case 0: vnl::from_string(_str, num_requests); break;
		case 1: vnl::from_string(_str, num_errors); break;
	}
}

void ClientInfo::get_field(int _index, vnl::io::TypeOutput& _out) const {
	switch(_index) {
		case 0: vnl::write(_out, num_requests); break;
		case 1: vnl::write(_out, num_errors); break;
		default: _out.putNull();
	}
}

void ClientInfo::set_field(int _index, vnl::io::TypeInput& _in) {
	switch(_index) {
		case 0: vnl::read(_in, num_requests); break;
		case 1: vnl::read(_in, num_errors); break;
	}
}


} // namespace
} // namespace
