
// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/info/Type.hxx>
#include <vnl/Type.hxx>

namespace vnl {
namespace info {

const uint32_t Type::VNI_HASH;
const uint32_t Type::NUM_FIELDS;

Type* Type::create() {
	return vnl::create<Type>();
}

Type* Type::clone() const {
	return vnl::clone<Type>(*this);
}

void Type::destroy() {
	this->Type::~Type();
	return vnl::internal::global_pool_->push_back(this, sizeof(Type));
}

void Type::serialize(vnl::io::TypeOutput& _out) const {
	_out.putEntry(VNL_IO_CLASS, NUM_FIELDS);
	_out.putHash(VNI_HASH);
	_out.putHash(0x539b7130); vnl::write(_out, name);
	_out.putHash(0x96d44ab3); vnl::write(_out, fields);
}

void Type::deserialize(vnl::io::TypeInput& _in, int _size) {
	for(int i = 0; i < _size && !_in.error(); ++i) {
		uint32_t _hash = 0;
		_in.getHash(_hash);
		switch(_hash) {
			case 0x539b7130: vnl::read(_in, name); break;
			case 0x96d44ab3: vnl::read(_in, fields); break;
			default: _in.skip();
		}
	}
}

int Type::get_field_index(vnl::Hash32 _hash) const {
	switch(_hash) {
		case 0x539b7130: return 0;
		case 0x96d44ab3: return 1;
		default: return -1;
	}
}

const char* Type::get_field_name(int _index) const {
	switch(_index) {
		case 0: return "name";
		case 1: return "fields";
		default: return 0;
	}
}

void Type::get_field(int _index, vnl::String& _str) const {
	switch(_index) {
		case 0: vnl::to_string(_str, name); break;
		case 1: vnl::to_string(_str, fields); break;
	}
}

void Type::set_field(int _index, const vnl::String& _str) {
	switch(_index) {
		case 0: vnl::from_string(_str, name); break;
		case 1: vnl::from_string(_str, fields); break;
	}
}

void Type::get_field(int _index, vnl::io::TypeOutput& _out) const {
	switch(_index) {
		case 0: vnl::write(_out, name); break;
		case 1: vnl::write(_out, fields); break;
		default: _out.putNull();
	}
}

void Type::set_field(int _index, vnl::io::TypeInput& _in) {
	switch(_index) {
		case 0: vnl::read(_in, name); break;
		case 1: vnl::read(_in, fields); break;
	}
}


} // namespace
} // namespace
