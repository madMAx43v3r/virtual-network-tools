
// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/RecordValue.hxx>
#include <vnl/Type.hxx>
#include <vnl/Var.h>

namespace vnl {

const uint32_t RecordValue::VNI_HASH;
const uint32_t RecordValue::NUM_FIELDS;

RecordValue* RecordValue::create() {
	return vnl::create<RecordValue>();
}

RecordValue* RecordValue::clone() const {
	return vnl::clone<RecordValue>(*this);
}

void RecordValue::destroy() {
	this->RecordValue::~RecordValue();
	return vnl::internal::global_pool_->push_back(this, sizeof(RecordValue));
}

bool RecordValue::assign(const vnl::Value& _value) {
	switch(_value.get_vni_hash()) {
		case 0x1cdb1920: *this = (const RecordValue&)_value; return true;
		default: return false;
	}
}

void RecordValue::serialize(vnl::io::TypeOutput& _out) const {
	_out.putEntry(VNL_IO_CLASS, NUM_FIELDS);
	_out.putHash(VNI_HASH);
	_out.putHash(0xaf3e4ff0); vnl::write(_out, time);
	_out.putHash(0x5190a58c); vnl::write(_out, domain);
	_out.putHash(0xf68c6937); vnl::write(_out, topic);
	_out.putHash(0x278de0d5); vnl::write(_out, header);
	_out.putHash(0xd6f81d18); vnl::write(_out, value);
}

void RecordValue::deserialize(vnl::io::TypeInput& _in, int _size) {
	for(int i = 0; i < _size && !_in.error(); ++i) {
		uint32_t _hash = 0;
		_in.getHash(_hash);
		switch(_hash) {
			case 0xaf3e4ff0: vnl::read(_in, time); break;
			case 0x5190a58c: vnl::read(_in, domain); break;
			case 0xf68c6937: vnl::read(_in, topic); break;
			case 0x278de0d5: vnl::read(_in, header); break;
			case 0xd6f81d18: vnl::read(_in, value); break;
			default: _in.skip();
		}
	}
}

int RecordValue::get_field_index(vnl::Hash32 _hash) const {
	switch(_hash) {
		case 0xaf3e4ff0: return 0;
		case 0x5190a58c: return 1;
		case 0xf68c6937: return 2;
		case 0x278de0d5: return 3;
		case 0xd6f81d18: return 4;
		default: return -1;
	}
}

const char* RecordValue::get_field_name(int _index) const {
	switch(_index) {
		case 0: return "time";
		case 1: return "domain";
		case 2: return "topic";
		case 3: return "header";
		case 4: return "value";
		default: return 0;
	}
}

void RecordValue::get_field(int _index, vnl::String& _str) const {
	switch(_index) {
		case 0: vnl::to_string(_str, time); break;
		case 1: vnl::to_string(_str, domain); break;
		case 2: vnl::to_string(_str, topic); break;
		case 3: vnl::to_string(_str, header); break;
		case 4: vnl::to_string(_str, value); break;
	}
}

void RecordValue::set_field(int _index, const vnl::String& _str) {
	switch(_index) {
		case 0: vnl::from_string(_str, time); break;
		case 1: vnl::from_string(_str, domain); break;
		case 2: vnl::from_string(_str, topic); break;
		case 3: vnl::from_string(_str, header); break;
		case 4: vnl::from_string(_str, value); break;
	}
}

void RecordValue::get_field(int _index, vnl::io::TypeOutput& _out) const {
	switch(_index) {
		case 0: vnl::write(_out, time); break;
		case 1: vnl::write(_out, domain); break;
		case 2: vnl::write(_out, topic); break;
		case 3: vnl::write(_out, header); break;
		case 4: vnl::write(_out, value); break;
		default: _out.putNull();
	}
}

void RecordValue::set_field(int _index, vnl::io::TypeInput& _in) {
	switch(_index) {
		case 0: vnl::read(_in, time); break;
		case 1: vnl::read(_in, domain); break;
		case 2: vnl::read(_in, topic); break;
		case 3: vnl::read(_in, header); break;
		case 4: vnl::read(_in, value); break;
	}
}

void RecordValue::get_field(int _index, vnl::Var& _var) const {
	switch(_index) {
		case 0: _var = time; break;
		case 1: _var = domain; break;
		case 2: _var = topic; break;
		case 3: _var = header; break;
		case 4: _var = value; break;
		default: _var.clear();
	}
}

void RecordValue::set_field(int _index, const vnl::Var& _var) {
	switch(_index) {
		case 0: _var.to(time); break;
		case 1: _var.to(domain); break;
		case 2: _var.to(topic); break;
		case 3: _var.to(header); break;
		case 4: _var.to(value); break;
	}
}


} // namespace
