
// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/Heartbeat.hxx>
#include <vnl/Type.hxx>

namespace vnl {

const uint32_t Heartbeat::VNI_HASH;
const uint32_t Heartbeat::NUM_FIELDS;

Heartbeat* Heartbeat::create() {
	return vnl::create<Heartbeat>();
}

Heartbeat* Heartbeat::clone() const {
	return vnl::clone<Heartbeat>(*this);
}

void Heartbeat::destroy() {
	this->Heartbeat::~Heartbeat();
	return vnl::internal::global_pool_->push_back(this, sizeof(Heartbeat));
}

void Heartbeat::serialize(vnl::io::TypeOutput& _out) const {
	_out.putEntry(VNL_IO_CLASS, NUM_FIELDS);
	_out.putHash(VNI_HASH);
	_out.putHash(0xd129c896); vnl::write(_out, interval);
}

void Heartbeat::deserialize(vnl::io::TypeInput& _in, int _size) {
	for(int i = 0; i < _size && !_in.error(); ++i) {
		uint32_t _hash = 0;
		_in.getHash(_hash);
		switch(_hash) {
			case 0xd129c896: vnl::read(_in, interval); break;
			default: _in.skip();
		}
	}
}

int Heartbeat::get_field_index(vnl::Hash32 _hash) const {
	switch(_hash) {
		case 0xd129c896: return 0;
		default: return -1;
	}
}

const char* Heartbeat::get_field_name(int _index) const {
	switch(_index) {
		case 0: return "interval";
		default: return 0;
	}
}

void Heartbeat::get_field(int _index, vnl::String& _str) const {
	switch(_index) {
		case 0: vnl::to_string(_str, interval); break;
	}
}

void Heartbeat::set_field(int _index, const vnl::String& _str) {
	switch(_index) {
		case 0: vnl::from_string(_str, interval); break;
	}
}

void Heartbeat::get_field(int _index, vnl::io::TypeOutput& _out) const {
	switch(_index) {
		case 0: vnl::write(_out, interval); break;
		default: _out.putNull();
	}
}

void Heartbeat::set_field(int _index, vnl::io::TypeInput& _in) {
	switch(_index) {
		case 0: vnl::read(_in, interval); break;
	}
}


} // namespace
