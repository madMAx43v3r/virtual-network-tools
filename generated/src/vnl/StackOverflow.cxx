
// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/StackOverflow.hxx>
#include <vnl/Type.hxx>
#include <vnl/Var.h>

namespace vnl {

const uint32_t StackOverflow::VNI_HASH;
const uint32_t StackOverflow::NUM_FIELDS;

StackOverflow* StackOverflow::create() {
	return vnl::create<StackOverflow>();
}

StackOverflow* StackOverflow::clone() const {
	return vnl::clone<StackOverflow>(*this);
}

void StackOverflow::destroy() {
	this->StackOverflow::~StackOverflow();
	return vnl::internal::global_pool_->push_back(this, sizeof(StackOverflow));
}

bool StackOverflow::assign(const vnl::Value& _value) {
	switch(_value.get_vni_hash()) {
		case 0x2cd1d77c: *this = (const StackOverflow&)_value; return true;
		default: return false;
	}
}

void StackOverflow::serialize(vnl::io::TypeOutput& _out) const {
	_out.putEntry(VNL_IO_CLASS, NUM_FIELDS);
	_out.putHash(VNI_HASH);
}

void StackOverflow::deserialize(vnl::io::TypeInput& _in, int _size) {
	for(int i = 0; i < _size && !_in.error(); ++i) {
		uint32_t _hash = 0;
		_in.getHash(_hash);
		switch(_hash) {
			default: _in.skip();
		}
	}
}

int StackOverflow::get_field_index(vnl::Hash32 _hash) const {
	switch(_hash) {
		default: return -1;
	}
}

const char* StackOverflow::get_field_name(int _index) const {
	switch(_index) {
		default: return 0;
	}
}

void StackOverflow::get_field(int _index, vnl::String& _str) const {
	switch(_index) {
	}
}

void StackOverflow::set_field(int _index, const vnl::String& _str) {
	switch(_index) {
	}
}

void StackOverflow::get_field(int _index, vnl::io::TypeOutput& _out) const {
	switch(_index) {
		default: _out.putNull();
	}
}

void StackOverflow::set_field(int _index, vnl::io::TypeInput& _in) {
	switch(_index) {
	}
}

void StackOverflow::get_field(int _index, vnl::Var& _var) const {
	switch(_index) {
		default: _var.clear();
	}
}

void StackOverflow::set_field(int _index, const vnl::Var& _var) {
	switch(_index) {
	}
}


} // namespace
