
// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/Instance.hxx>
#include <vnl/Type.hxx>

namespace vnl {

const uint32_t Instance::VNI_HASH;
const uint32_t Instance::NUM_FIELDS;

Instance* Instance::create() {
	return vnl::create<Instance>();
}

Instance* Instance::clone() const {
	return vnl::clone<Instance>(*this);
}

void Instance::destroy() {
	this->Instance::~Instance();
	return vnl::global_pool->push_back(this, sizeof(Instance));
}

void Instance::serialize(vnl::io::TypeOutput& _out) const {
	_out.putEntry(VNL_IO_CLASS, NUM_FIELDS);
	_out.putHash(VNI_HASH);
	_out.putHash(0x5fa779df); vnl::write(_out, type);
	_out.putHash(0x5190a58c); vnl::write(_out, domain);
	_out.putHash(0xf68c6937); vnl::write(_out, topic);
}

void Instance::deserialize(vnl::io::TypeInput& _in, int _size) {
	for(int i = 0; i < _size && !_in.error(); ++i) {
		uint32_t _hash = 0;
		_in.getHash(_hash);
		switch(_hash) {
			case 0x5fa779df: vnl::read(_in, type); break;
			case 0x5190a58c: vnl::read(_in, domain); break;
			case 0xf68c6937: vnl::read(_in, topic); break;
			default: _in.skip();
		}
	}
}

int Instance::field_index(vnl::Hash32 _hash) const {
	switch(_hash) {
		case 0x5fa779df: return 0;
		case 0x5190a58c: return 1;
		case 0xf68c6937: return 2;
		default: return -1;
	}
}

const char* Instance::field_name(int _index) const {
	switch(_index) {
		case 0: return "type";
		case 1: return "domain";
		case 2: return "topic";
		default: return 0;
	}
}

void Instance::get_field(int _index, vnl::String& _str) const {
	switch(_index) {
		case 0: vnl::to_string(_str, type); break;
		case 1: vnl::to_string(_str, domain); break;
		case 2: vnl::to_string(_str, topic); break;
		default: _str << "{}";
	}
}

void Instance::set_field(int _index, const vnl::String& _str) {
	switch(_index) {
		case 0: vnl::from_string(_str, type); break;
		case 1: vnl::from_string(_str, domain); break;
		case 2: vnl::from_string(_str, topic); break;
	}
}

void Instance::get_field(int _index, vnl::io::TypeOutput& _out) const {
	switch(_index) {
		case 0: vnl::write(_out, type); break;
		case 1: vnl::write(_out, domain); break;
		case 2: vnl::write(_out, topic); break;
		default: _out.putNull();
	}
}

void Instance::set_field(int _index, vnl::io::TypeInput& _in) {
	switch(_index) {
		case 0: vnl::read(_in, type); break;
		case 1: vnl::read(_in, domain); break;
		case 2: vnl::read(_in, topic); break;
	}
}


} // namespace
