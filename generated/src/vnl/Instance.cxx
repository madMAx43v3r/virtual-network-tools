
// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/Instance.hxx>
#include <vnl/Type.hxx>
#include <vnl/Var.h>

namespace vnl {

const uint32_t Instance::VNI_HASH;
const uint32_t Instance::NUM_FIELDS;

Instance* Instance::create() {
	return vnl::create<Instance>();
}

Instance* Instance::clone() const {
	return vnl::clone<Instance>(*this);
}

void Instance::destroy() {
	this->Instance::~Instance();
	return vnl::internal::global_pool_->push_back(this, sizeof(Instance));
}

bool Instance::assign(const vnl::Value& _value) {
	switch(_value.get_vni_hash()) {
		case 0x67d48190: *this = (const Instance&)_value; return true;
		default: return false;
	}
}

void Instance::serialize(vnl::io::TypeOutput& _out) const {
	_out.putEntry(VNL_IO_CLASS, NUM_FIELDS);
	_out.putHash(VNI_HASH);
	_out.putHash(0x85aba286); vnl::write(_out, src_mac);
	_out.putHash(0x5fa779df); vnl::write(_out, type);
	_out.putHash(0x5190a58c); vnl::write(_out, domain);
	_out.putHash(0xf68c6937); vnl::write(_out, topic);
	_out.putHash(0xb5065ea4); vnl::write(_out, heartbeat_interval);
	_out.putHash(0x57723c04); vnl::write(_out, last_heartbeat);
	_out.putHash(0xa2fb771f); vnl::write(_out, is_alive);
}

void Instance::deserialize(vnl::io::TypeInput& _in, int _size) {
	for(int i = 0; i < _size && !_in.error(); ++i) {
		uint32_t _hash = 0;
		_in.getHash(_hash);
		switch(_hash) {
			case 0x85aba286: vnl::read(_in, src_mac); break;
			case 0x5fa779df: vnl::read(_in, type); break;
			case 0x5190a58c: vnl::read(_in, domain); break;
			case 0xf68c6937: vnl::read(_in, topic); break;
			case 0xb5065ea4: vnl::read(_in, heartbeat_interval); break;
			case 0x57723c04: vnl::read(_in, last_heartbeat); break;
			case 0xa2fb771f: vnl::read(_in, is_alive); break;
			default: _in.skip();
		}
	}
}

int Instance::get_field_index(vnl::Hash32 _hash) const {
	switch(_hash) {
		case 0x85aba286: return 0;
		case 0x5fa779df: return 1;
		case 0x5190a58c: return 2;
		case 0xf68c6937: return 3;
		case 0xb5065ea4: return 4;
		case 0x57723c04: return 5;
		case 0xa2fb771f: return 6;
		default: return -1;
	}
}

const char* Instance::get_field_name(int _index) const {
	switch(_index) {
		case 0: return "src_mac";
		case 1: return "type";
		case 2: return "domain";
		case 3: return "topic";
		case 4: return "heartbeat_interval";
		case 5: return "last_heartbeat";
		case 6: return "is_alive";
		default: return 0;
	}
}

void Instance::get_field(int _index, vnl::String& _str) const {
	switch(_index) {
		case 0: vnl::to_string(_str, src_mac); break;
		case 1: vnl::to_string(_str, type); break;
		case 2: vnl::to_string(_str, domain); break;
		case 3: vnl::to_string(_str, topic); break;
		case 4: vnl::to_string(_str, heartbeat_interval); break;
		case 5: vnl::to_string(_str, last_heartbeat); break;
		case 6: vnl::to_string(_str, is_alive); break;
	}
}

void Instance::set_field(int _index, const vnl::String& _str) {
	switch(_index) {
		case 0: vnl::from_string(_str, src_mac); break;
		case 1: vnl::from_string(_str, type); break;
		case 2: vnl::from_string(_str, domain); break;
		case 3: vnl::from_string(_str, topic); break;
		case 4: vnl::from_string(_str, heartbeat_interval); break;
		case 5: vnl::from_string(_str, last_heartbeat); break;
		case 6: vnl::from_string(_str, is_alive); break;
	}
}

void Instance::get_field(int _index, vnl::io::TypeOutput& _out) const {
	switch(_index) {
		case 0: vnl::write(_out, src_mac); break;
		case 1: vnl::write(_out, type); break;
		case 2: vnl::write(_out, domain); break;
		case 3: vnl::write(_out, topic); break;
		case 4: vnl::write(_out, heartbeat_interval); break;
		case 5: vnl::write(_out, last_heartbeat); break;
		case 6: vnl::write(_out, is_alive); break;
		default: _out.putNull();
	}
}

void Instance::set_field(int _index, vnl::io::TypeInput& _in) {
	switch(_index) {
		case 0: vnl::read(_in, src_mac); break;
		case 1: vnl::read(_in, type); break;
		case 2: vnl::read(_in, domain); break;
		case 3: vnl::read(_in, topic); break;
		case 4: vnl::read(_in, heartbeat_interval); break;
		case 5: vnl::read(_in, last_heartbeat); break;
		case 6: vnl::read(_in, is_alive); break;
	}
}

void Instance::get_field(int _index, vnl::Var& _var) const {
	switch(_index) {
		case 0: _var = src_mac; break;
		case 1: _var = type; break;
		case 2: _var = domain; break;
		case 3: _var = topic; break;
		case 4: _var = heartbeat_interval; break;
		case 5: _var = last_heartbeat; break;
		case 6: _var = is_alive; break;
		default: _var.clear();
	}
}

void Instance::set_field(int _index, const vnl::Var& _var) {
	switch(_index) {
		case 0: _var.to(src_mac); break;
		case 1: _var.to(type); break;
		case 2: _var.to(domain); break;
		case 3: _var.to(topic); break;
		case 4: _var.to(heartbeat_interval); break;
		case 5: _var.to(last_heartbeat); break;
		case 6: _var.to(is_alive); break;
	}
}


} // namespace
