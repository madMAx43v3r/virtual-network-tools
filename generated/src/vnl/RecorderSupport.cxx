
// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/RecorderSupport.hxx>
#include <vnl/Type.hxx>
#include <vnl/Var.h>

namespace vnl {

const uint32_t RecorderBase::VNI_HASH;
const uint32_t RecorderBase::NUM_FIELDS;

int RecorderBase::get_field_index(vnl::Hash32 _hash) const {
	switch(_hash) {
		case 0x482df535: return 0;
		case 0x604b2647: return 1;
		case 0xd26001ae: return 2;
		case 0xb60d3446: return 3;
		case 0xd129c896: return 4;
		case 0xf5bbbd65: return 5;
		case 0xe0a7be79: return 6;
		case 0xd7a7ecc4: return 7;
		case 0xea5190a5: return 8;
		default: return -1;
	}
}

const char* RecorderBase::get_field_name(int _index) const {
	switch(_index) {
		case 0: return "vnl_log_level";
		case 1: return "vnl_msg_timeout";
		case 2: return "vnl_heartbeat_interval";
		case 3: return "filename";
		case 4: return "interval";
		case 5: return "do_write_header";
		case 6: return "do_write_type_info";
		case 7: return "header_size";
		case 8: return "domains";
		default: return 0;
	}
}

void RecorderBase::get_field(int _index, vnl::String& _str) const {
	switch(_index) {
		case 0: vnl::to_string(_str, vnl_log_level); break;
		case 1: vnl::to_string(_str, vnl_msg_timeout); break;
		case 2: vnl::to_string(_str, vnl_heartbeat_interval); break;
		case 3: vnl::to_string(_str, filename); break;
		case 4: vnl::to_string(_str, interval); break;
		case 5: vnl::to_string(_str, do_write_header); break;
		case 6: vnl::to_string(_str, do_write_type_info); break;
		case 7: vnl::to_string(_str, header_size); break;
		case 8: vnl::to_string(_str, domains); break;
	}
}

void RecorderBase::set_field(int _index, const vnl::String& _str) {
	switch(_index) {
		case 0: vnl::from_string(_str, vnl_log_level); break;
		case 1: vnl::from_string(_str, vnl_msg_timeout); break;
		case 2: vnl::from_string(_str, vnl_heartbeat_interval); break;
		case 3: vnl::from_string(_str, filename); break;
		case 4: vnl::from_string(_str, interval); break;
		case 5: vnl::from_string(_str, do_write_header); break;
		case 6: vnl::from_string(_str, do_write_type_info); break;
		case 7: vnl::from_string(_str, header_size); break;
		case 8: vnl::from_string(_str, domains); break;
	}
}

void RecorderBase::get_field(int _index, vnl::io::TypeOutput& _out) const {
	switch(_index) {
		case 0: vnl::write(_out, vnl_log_level); break;
		case 1: vnl::write(_out, vnl_msg_timeout); break;
		case 2: vnl::write(_out, vnl_heartbeat_interval); break;
		case 3: vnl::write(_out, filename); break;
		case 4: vnl::write(_out, interval); break;
		case 5: vnl::write(_out, do_write_header); break;
		case 6: vnl::write(_out, do_write_type_info); break;
		case 7: vnl::write(_out, header_size); break;
		case 8: vnl::write(_out, domains); break;
		default: _out.putNull();
	}
}

void RecorderBase::set_field(int _index, vnl::io::TypeInput& _in) {
	switch(_index) {
		case 0: vnl::read(_in, vnl_log_level); break;
		case 1: vnl::read(_in, vnl_msg_timeout); break;
		case 2: vnl::read(_in, vnl_heartbeat_interval); break;
		case 3: vnl::read(_in, filename); break;
		case 4: vnl::read(_in, interval); break;
		case 5: vnl::read(_in, do_write_header); break;
		case 6: vnl::read(_in, do_write_type_info); break;
		case 7: vnl::read(_in, header_size); break;
		case 8: vnl::read(_in, domains); break;
	}
}

void RecorderBase::get_field(int _index, vnl::Var& _var) const {
	switch(_index) {
		case 0: _var = vnl_log_level; break;
		case 1: _var = vnl_msg_timeout; break;
		case 2: _var = vnl_heartbeat_interval; break;
		case 3: _var = filename; break;
		case 4: _var = interval; break;
		case 5: _var = do_write_header; break;
		case 6: _var = do_write_type_info; break;
		case 7: _var = header_size; break;
		case 8: _var = domains; break;
		default: _var.clear();
	}
}

void RecorderBase::set_field(int _index, const vnl::Var& _var) {
	switch(_index) {
		case 0: _var.to(vnl_log_level); break;
		case 1: _var.to(vnl_msg_timeout); break;
		case 2: _var.to(vnl_heartbeat_interval); break;
		case 3: _var.to(filename); break;
		case 4: _var.to(interval); break;
		case 5: _var.to(do_write_header); break;
		case 6: _var.to(do_write_type_info); break;
		case 7: _var.to(header_size); break;
		case 8: _var.to(domains); break;
	}
}

bool RecorderBase::vni_call(vnl::io::TypeInput& _in, uint32_t _hash, int _num_args) {
	switch(_hash) {
	case 0xb60d3446: 
		if(_num_args == 1) {
			vnl::read(_in, filename);
			return true;
		}
		break;
	case 0xd129c896: 
		if(_num_args == 1) {
			vnl::read(_in, interval);
			return true;
		}
		break;
	case 0xf5bbbd65: 
		if(_num_args == 1) {
			vnl::read(_in, do_write_header);
			return true;
		}
		break;
	case 0xe0a7be79: 
		if(_num_args == 1) {
			vnl::read(_in, do_write_type_info);
			return true;
		}
		break;
	case 0xd7a7ecc4: 
		if(_num_args == 1) {
			vnl::read(_in, header_size);
			return true;
		}
		break;
	case 0xea5190a5: 
		if(_num_args == 1) {
			vnl::read(_in, domains);
			return true;
		}
		break;
	}
	return Super::vni_call(_in, _hash, _num_args);
}

bool RecorderBase::vni_const_call(vnl::io::TypeInput& _in, uint32_t _hash, int _num_args, vnl::io::TypeOutput& _out) {
	switch(_hash) {
	case 0xb60d3446: 
		if(_num_args == 0) {
			vnl::write(_out, filename);
			return true;
		}
		break;
	case 0xd129c896: 
		if(_num_args == 0) {
			vnl::write(_out, interval);
			return true;
		}
		break;
	case 0xf5bbbd65: 
		if(_num_args == 0) {
			vnl::write(_out, do_write_header);
			return true;
		}
		break;
	case 0xe0a7be79: 
		if(_num_args == 0) {
			vnl::write(_out, do_write_type_info);
			return true;
		}
		break;
	case 0xd7a7ecc4: 
		if(_num_args == 0) {
			vnl::write(_out, header_size);
			return true;
		}
		break;
	case 0xea5190a5: 
		if(_num_args == 0) {
			vnl::write(_out, domains);
			return true;
		}
		break;
	}
	return Super::vni_const_call(_in, _hash, _num_args, _out);
}

bool RecorderBase::handle_switch(vnl::Value* _sample, vnl::Packet* _packet) {
	switch(_sample->get_vni_hash()) {
	}
	return Super::handle_switch(_sample, _packet);
}

bool RecorderBase::handle_switch(vnl::Value* _sample, vnl::Basic* _input) {
	switch(_sample->get_vni_hash()) {
	}
	return Super::handle_switch(_sample, _input);
}


} // namespace
