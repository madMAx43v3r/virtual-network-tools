
// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/UplinkSupport.hxx>
#include <vnl/Type.hxx>
#include <vnl/Var.h>

namespace vnl {

const uint32_t UplinkBase::VNI_HASH;
const uint32_t UplinkBase::NUM_FIELDS;

int UplinkBase::get_field_index(vnl::Hash32 _hash) const {
	switch(_hash) {
		default: return -1;
	}
}

const char* UplinkBase::get_field_name(int _index) const {
	switch(_index) {
		default: return 0;
	}
}

void UplinkBase::get_field(int _index, vnl::String& _str) const {
	switch(_index) {
	}
}

void UplinkBase::set_field(int _index, const vnl::String& _str) {
	switch(_index) {
	}
}

void UplinkBase::get_field(int _index, vnl::io::TypeOutput& _out) const {
	switch(_index) {
		default: _out.putNull();
	}
}

void UplinkBase::set_field(int _index, vnl::io::TypeInput& _in) {
	switch(_index) {
	}
}

void UplinkBase::get_field(int _index, vnl::Var& _var) const {
	switch(_index) {
		default: _var.clear();
	}
}

void UplinkBase::set_field(int _index, const vnl::Var& _var) {
	switch(_index) {
	}
}

bool UplinkBase::vni_call(vnl::io::TypeInput& _in, uint32_t _hash, int _num_args) {
	switch(_hash) {
	case 0x3bb5d48f: 
		switch(_num_args) {
			case 2: {
				vnl::String domain;
				vnl::read(_in, domain);
				vnl::String topic;
				vnl::read(_in, topic);
				if(!_in.error()) {
					subscribe(domain, topic);
					return true;
				}
			}
			break;
		}
		break;
	case 0x7fbbe878: 
		switch(_num_args) {
			case 2: {
				vnl::String domain;
				vnl::read(_in, domain);
				vnl::String topic;
				vnl::read(_in, topic);
				if(!_in.error()) {
					publish(domain, topic);
					return true;
				}
			}
			break;
		}
		break;
	case 0x983c173d: 
		switch(_num_args) {
			case 1: {
				vnl::Address addr;
				vnl::read(_in, addr);
				if(!_in.error()) {
					publish(addr);
					return true;
				}
			}
			break;
		}
		break;
	case 0xc7428d8c: 
		switch(_num_args) {
			case 2: {
				vnl::String domain;
				vnl::read(_in, domain);
				vnl::String topic;
				vnl::read(_in, topic);
				if(!_in.error()) {
					unpublish(domain, topic);
					return true;
				}
			}
			break;
		}
		break;
	case 0xed7dfb37: 
		switch(_num_args) {
			case 2: {
				vnl::String domain;
				vnl::read(_in, domain);
				vnl::String topic;
				vnl::read(_in, topic);
				if(!_in.error()) {
					unsubscribe(domain, topic);
					return true;
				}
			}
			break;
		}
		break;
	}
	return Super::vni_call(_in, _hash, _num_args);
}

bool UplinkBase::vni_const_call(vnl::io::TypeInput& _in, uint32_t _hash, int _num_args, vnl::io::TypeOutput& _out) {
	switch(_hash) {
	}
	return Super::vni_const_call(_in, _hash, _num_args, _out);
}


} // namespace
